<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.commons</groupId>
	<artifactId>commons-parent</artifactId>
	<version>1.1.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<description>定义核心的项目依赖jar包和版本</description>

	<properties>
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<commons.version>1.1.1-SNAPSHOT</commons.version>
		<springfox-swagger2.version>2.2.2</springfox-swagger2.version>
		<jackson.version>2.9.4</jackson.version>
		<guava.version>20.0</guava.version>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
	</parent>

	<!-- 依赖版本管理 -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.commons</groupId>
				<artifactId>commons-util</artifactId>
				<version>${commons.version}</version>
			</dependency>
			<dependency>
				<groupId>com.commons</groupId>
				<artifactId>commons-jdbc</artifactId>
				<version>${commons.version}</version>
			</dependency>
			<dependency>
				<groupId>com.commons</groupId>
				<artifactId>commons-core</artifactId>
				<version>${commons.version}</version>
			</dependency>
	
		</dependencies>
	</dependencyManagement>

	<!-- 公共依赖定义 -->
	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- 编译插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<!-- 源代码插件 -->
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-source-plugin</artifactId> 
				<executions> <execution> <id>attach-sources</id> <phase>verify</phase> <goals> 
				<goal>jar-no-fork</goal> </goals> </execution> </executions> </plugin> -->
			<!-- 测试代码覆盖率 -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.9</version>
				<executions>
					<execution>
						<!-- 在maven的initialize阶段，将Jacoco的runtime agent作为VM的一个参数 传给被测程序，用于监控JVM中的调用。 -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>
								${project.build.directory}/coverage-reports/jacoco.exec
							</destFile>
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- 在程序的verify阶段，执行report测试的程序。 文件的输入为perpare-agent阶段中设置或者默认的jacoco.exec. 
						参数 includes和excludes可用来选定report中过滤的类。 -->
					<execution>
						<id>default-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 使用 maven-surefire-plugin来执行单元测试。 将surefireArgLine赋值给argLine参数，以保证在测试执行时Jacoco 
				agent处于运行状态。 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<forkMode>once</forkMode>
					<argLine>${surefireArgLine}</argLine>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
